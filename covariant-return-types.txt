#include <iostream>
#include <memory>


class Shape {
public:
    virtual Shape* clone() const {
        std::cout << "Cloning Shape\n";
        return new Shape(*this);
    }
    virtual void draw() const {
        std::cout << "Drawing Shape\n";
    }
    virtual ~Shape() = default;
};


class Circle : public Shape {
    double radius_;
public:
    Circle(double r) : radius_(r) {}
    Circle* clone() const override {
        std::cout << "Cloning Circle with radius " << radius_ << "\n";
        return new Circle(*this);
    }
    void draw() const override {
        std::cout << "Drawing Circle of radius " << radius_ << "\n";
    }
};

int main() {
    std::unique_ptr<Shape> s1 = std::make_unique<Circle>(5.0);

    std::unique_ptr<Circle> c2(s1->clone()); 
    c2->draw();
    return 0;
}
